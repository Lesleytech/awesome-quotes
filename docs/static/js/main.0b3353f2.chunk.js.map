{"version":3,"sources":["components/Quotes/Quotes.module.css","App.module.css","components/Quotes/Quotes.jsx","api/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Quotes","quotes","author","quote","text","changeQuote","isQuoteLoading","_author","Card","className","styles","container","id","LinearProgress","color","CardHeader","cx","animation","animated","avatar","Avatar","aria-label","style","backgroundColor","red","toUpperCase","action","IconButton","title","Typography","fontSize","subheader","split","CardContent","variant","component","icon","faQuoteLeft","quote_left","CardActions","disableSpacing","Tooltip","Link","href","target","data-action","marginLeft","onClick","fetchQuotes","a","axios","get","data","console","log","App","state","randomQuote","isLoading","changQuote","setState","setTimeout","Math","floor","random","length","this","CircularProgress","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0b3353f2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Quotes_container__2TMD1\",\"animation\":\"Quotes_animation__22W3R\",\"animated\":\"Quotes_animated__3QDmY\",\"quote_left\":\"Quotes_quote_left__dW8ld\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3vfC9\"};","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { red } from \"@material-ui/core/colors\";\r\nimport ReplayIcon from \"@material-ui/icons/Replay\";\r\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\nimport WhatsAppIcon from \"@material-ui/icons/WhatsApp\";\r\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport cx from \"classnames\";\r\n\r\nimport styles from \"./Quotes.module.css\";\r\n\r\nexport default function Quotes({\r\n  quotes: { author, text: quote },\r\n  changeQuote,\r\n  isQuoteLoading,\r\n}) {\r\n  let _author = author;\r\n  if (!_author) {\r\n    _author = \"Anonymous\";\r\n  }\r\n  return (\r\n    <Card className={styles.container} id=\"quote-box\">\r\n      {isQuoteLoading && <LinearProgress color=\"secondary\" />}\r\n      <CardHeader\r\n        id=\"author\"\r\n        className={cx(styles.animation, isQuoteLoading && styles.animated)}\r\n        avatar={\r\n          <Avatar aria-label=\"author\" style={{ backgroundColor: red[500] }}>\r\n            {_author[0].toUpperCase()}\r\n          </Avatar>\r\n        }\r\n        action={<IconButton aria-label=\"settings\"></IconButton>}\r\n        title={<Typography style={{ fontSize: \"22px\" }}>{_author}</Typography>}\r\n        subheader={\"@\" + _author.split(\" \")[0]}\r\n      />\r\n      <CardContent\r\n        className={cx(styles.animation, isQuoteLoading && styles.animated)}\r\n      >\r\n        <Typography\r\n          id=\"text\"\r\n          variant=\"body2\"\r\n          color=\"textSecondary\"\r\n          component=\"blockquote\"\r\n          style={{ fontSize: \"22px\" }}\r\n        >\r\n          <FontAwesomeIcon icon={faQuoteLeft} className={styles.quote_left} />\r\n          {quote}\"\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions disableSpacing>\r\n        <Tooltip title=\"View code on github\">\r\n          <Link\r\n            href=\"https://www.github.com/lesleytech/awesome-quotes\"\r\n            target=\"_blank\"\r\n          >\r\n            <IconButton aria-label=\"github\">\r\n              <GitHubIcon />\r\n            </IconButton>\r\n          </Link>\r\n        </Tooltip>\r\n        <Tooltip title=\"Tweet\">\r\n          <Link\r\n            href={`https://twitter.com/intent/tweet?hashtags=quotes&related=lafenlesley&text=${quote}`}\r\n            target=\"_blank\"\r\n            id=\"tweet-quote\"\r\n          >\r\n            <IconButton aria-label=\"twitter\">\r\n              <TwitterIcon />\r\n            </IconButton>\r\n          </Link>\r\n        </Tooltip>\r\n        <Tooltip title=\"Share on WhatsApp\">\r\n          <Link\r\n            href={`whatsapp://send?text=\"${quote}\" \\n - ${_author}`}\r\n            data-action=\"share/whatsapp/share\"\r\n          >\r\n            <IconButton aria-label=\"whatsapp\">\r\n              <WhatsAppIcon />\r\n            </IconButton>\r\n          </Link>\r\n        </Tooltip>\r\n        <Tooltip title=\"Shuffle\">\r\n          <IconButton\r\n            id=\"new-quote\"\r\n            aria-label=\"reload\"\r\n            style={{ marginLeft: \"auto\" }}\r\n            onClick={changeQuote}\r\n          >\r\n            <ReplayIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport const fetchQuotes = async () => {\r\n  const url = \"https://type.fit/api/quotes\";\r\n\r\n  try {\r\n    const { data: quotes } = await axios.get(url);\r\n    return quotes;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { Component } from \"react\";\nimport Quotes from \"./components/Quotes/Quotes\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { fetchQuotes } from \"./api\";\n\nimport styles from \"./App.module.css\";\n\nexport default class App extends Component {\n  state = {\n    quotes: [],\n    randomQuote: {},\n    isLoading: true,\n    isQuoteLoading: true,\n  };\n\n  async componentDidMount() {\n    const quotes = await fetchQuotes();\n    const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];\n\n    this.setState({ quotes, randomQuote, isLoading: false });\n\n    setTimeout(() => {\n      this.setState({ isQuoteLoading: false });\n    }, 500);\n  }\n\n  changQuote = () => {\n    this.setState({ isQuoteLoading: true });\n\n    setTimeout(() => {\n      this.setState(({ quotes }) => {\n        const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];\n        return { randomQuote, isQuoteLoading: false };\n      });\n    }, 500);\n  };\n\n  render() {\n    return (\n      <div className={styles.container}>\n        {this.state.isLoading ? (\n          <CircularProgress color=\"secondary\" />\n        ) : (\n          <Quotes\n            quotes={this.state.randomQuote}\n            changeQuote={this.changQuote}\n            isQuoteLoading={this.state.isQuoteLoading}\n          />\n        )}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}